// Code generated by protoc-gen-go. DO NOT EDIT.
// source: subscribe.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SubscribeRequest_Status int32

const (
	SubscribeRequest_Verify SubscribeRequest_Status = 0
	SubscribeRequest_Wait   SubscribeRequest_Status = 1
	SubscribeRequest_Ignore SubscribeRequest_Status = 2
	SubscribeRequest_Send   SubscribeRequest_Status = 4
)

var SubscribeRequest_Status_name = map[int32]string{
	0: "Verify",
	1: "Wait",
	2: "Ignore",
	4: "Send",
}

var SubscribeRequest_Status_value = map[string]int32{
	"Verify": 0,
	"Wait":   1,
	"Ignore": 2,
	"Send":   4,
}

func (x SubscribeRequest_Status) String() string {
	return proto.EnumName(SubscribeRequest_Status_name, int32(x))
}

func (SubscribeRequest_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{0, 0}
}

type SubscribeRequest struct {
	Username             string                  `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	PublicKey            string                  `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	TimeStamp            uint32                  `protobuf:"varint,3,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	Status               SubscribeRequest_Status `protobuf:"varint,4,opt,name=status,proto3,enum=api.SubscribeRequest_Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{0}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SubscribeRequest) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *SubscribeRequest) GetTimeStamp() uint32 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *SubscribeRequest) GetStatus() SubscribeRequest_Status {
	if m != nil {
		return m.Status
	}
	return SubscribeRequest_Verify
}

type SubscribeResponse struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{1}
}

func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeResponse.Unmarshal(m, b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
}
func (m *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(m, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_SubscribeResponse.Size(m)
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

func (m *SubscribeResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *SubscribeResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AllowSubscribeMessage struct {
	OwnerPublicKey       string   `protobuf:"bytes,1,opt,name=ownerPublicKey,proto3" json:"ownerPublicKey,omitempty"`
	MemberPublicKey      string   `protobuf:"bytes,2,opt,name=memberPublicKey,proto3" json:"memberPublicKey,omitempty"`
	TimeStamp            uint32   `protobuf:"varint,3,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllowSubscribeMessage) Reset()         { *m = AllowSubscribeMessage{} }
func (m *AllowSubscribeMessage) String() string { return proto.CompactTextString(m) }
func (*AllowSubscribeMessage) ProtoMessage()    {}
func (*AllowSubscribeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{2}
}

func (m *AllowSubscribeMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllowSubscribeMessage.Unmarshal(m, b)
}
func (m *AllowSubscribeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllowSubscribeMessage.Marshal(b, m, deterministic)
}
func (m *AllowSubscribeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowSubscribeMessage.Merge(m, src)
}
func (m *AllowSubscribeMessage) XXX_Size() int {
	return xxx_messageInfo_AllowSubscribeMessage.Size(m)
}
func (m *AllowSubscribeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowSubscribeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AllowSubscribeMessage proto.InternalMessageInfo

func (m *AllowSubscribeMessage) GetOwnerPublicKey() string {
	if m != nil {
		return m.OwnerPublicKey
	}
	return ""
}

func (m *AllowSubscribeMessage) GetMemberPublicKey() string {
	if m != nil {
		return m.MemberPublicKey
	}
	return ""
}

func (m *AllowSubscribeMessage) GetTimeStamp() uint32 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func init() {
	proto.RegisterEnum("api.SubscribeRequest_Status", SubscribeRequest_Status_name, SubscribeRequest_Status_value)
	proto.RegisterType((*SubscribeRequest)(nil), "api.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "api.SubscribeResponse")
	proto.RegisterType((*AllowSubscribeMessage)(nil), "api.AllowSubscribeMessage")
}

func init() { proto.RegisterFile("subscribe.proto", fileDescriptor_38d2980c9543da44) }

var fileDescriptor_38d2980c9543da44 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x6b, 0xf2, 0x40,
	0x10, 0xc6, 0xdf, 0x55, 0xdf, 0xa8, 0x03, 0xaf, 0xe6, 0x1d, 0x50, 0x82, 0x78, 0x90, 0x1c, 0x4a,
	0x4e, 0x39, 0x58, 0x0f, 0x85, 0x9e, 0x3c, 0xf4, 0x50, 0x4a, 0xa1, 0x24, 0xd0, 0x9e, 0x37, 0xe9,
	0x54, 0x16, 0xf2, 0x67, 0xbb, 0xbb, 0x51, 0xfc, 0x04, 0xa5, 0x5f, 0xb0, 0x9f, 0xa7, 0x24, 0xd1,
	0x28, 0xc1, 0xf6, 0x38, 0xbf, 0xe7, 0xd9, 0x99, 0x9d, 0x67, 0x17, 0xc6, 0xba, 0x88, 0x74, 0xac,
	0x44, 0x44, 0xbe, 0x54, 0xb9, 0xc9, 0xb1, 0xcb, 0xa5, 0x70, 0xbf, 0x18, 0xd8, 0xe1, 0x51, 0x08,
	0xe8, 0xbd, 0x20, 0x6d, 0x70, 0x06, 0x83, 0x42, 0x93, 0xca, 0x78, 0x4a, 0x0e, 0x5b, 0x30, 0x6f,
	0x18, 0x34, 0x35, 0xce, 0x61, 0x28, 0x8b, 0x28, 0x11, 0xf1, 0x03, 0xed, 0x9d, 0x4e, 0x25, 0x9e,
	0x40, 0xa9, 0x1a, 0x91, 0x52, 0x68, 0x78, 0x2a, 0x9d, 0xee, 0x82, 0x79, 0xff, 0x82, 0x13, 0xc0,
	0x15, 0x58, 0xda, 0x70, 0x53, 0x68, 0xa7, 0xb7, 0x60, 0xde, 0x68, 0x39, 0xf7, 0xb9, 0x14, 0x7e,
	0x7b, 0xbc, 0x1f, 0x56, 0x9e, 0xe0, 0xe0, 0x75, 0x57, 0x60, 0xd5, 0x04, 0x01, 0xac, 0x67, 0x52,
	0xe2, 0x6d, 0x6f, 0xff, 0xc1, 0x01, 0xf4, 0x5e, 0xb8, 0x30, 0x36, 0x2b, 0xe9, 0xfd, 0x26, 0xcb,
	0x15, 0xd9, 0x9d, 0x92, 0x86, 0x94, 0xbd, 0xda, 0x3d, 0xf7, 0x0e, 0xfe, 0x9f, 0x35, 0xd6, 0x32,
	0xcf, 0x34, 0xe1, 0xb4, 0xb9, 0x40, 0xb9, 0xd6, 0xe0, 0x38, 0x02, 0x1d, 0xe8, 0xa7, 0xa4, 0x35,
	0xdf, 0xd0, 0x61, 0xa5, 0x63, 0xe9, 0x7e, 0x30, 0x98, 0xac, 0x93, 0x24, 0xdf, 0x35, 0xcd, 0x1e,
	0x6b, 0x05, 0xaf, 0x60, 0x94, 0xef, 0x32, 0x52, 0x4f, 0x4d, 0x1a, 0x75, 0x54, 0x2d, 0x8a, 0x1e,
	0x8c, 0x53, 0x4a, 0xa3, 0x73, 0x63, 0x3d, 0xa3, 0x8d, 0x7f, 0x0f, 0x6f, 0xf9, 0x79, 0xfe, 0x52,
	0x21, 0xa9, 0xad, 0x88, 0x09, 0x6f, 0xa0, 0x1f, 0x50, 0x4c, 0x62, 0x4b, 0x38, 0xb9, 0x18, 0xe6,
	0x6c, 0xda, 0xc6, 0x87, 0x28, 0x6e, 0xe1, 0xef, 0x5a, 0xca, 0x64, 0x8f, 0xb3, 0xca, 0x70, 0x71,
	0xc7, 0x9f, 0x0e, 0x47, 0x56, 0xf5, 0x83, 0xae, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x20, 0x51,
	0xc0, 0xda, 0x54, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SubscribeServiceClient is the client API for SubscribeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubscribeServiceClient interface {
	Receive(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	Apply(ctx context.Context, in *AllowSubscribeMessage, opts ...grpc.CallOption) (*SubscribeResponse, error)
}

type subscribeServiceClient struct {
	cc *grpc.ClientConn
}

func NewSubscribeServiceClient(cc *grpc.ClientConn) SubscribeServiceClient {
	return &subscribeServiceClient{cc}
}

func (c *subscribeServiceClient) Receive(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/api.SubscribeService/Receive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscribeServiceClient) Apply(ctx context.Context, in *AllowSubscribeMessage, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/api.SubscribeService/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscribeServiceServer is the server API for SubscribeService service.
type SubscribeServiceServer interface {
	Receive(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	Apply(context.Context, *AllowSubscribeMessage) (*SubscribeResponse, error)
}

// UnimplementedSubscribeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSubscribeServiceServer struct {
}

func (*UnimplementedSubscribeServiceServer) Receive(ctx context.Context, req *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (*UnimplementedSubscribeServiceServer) Apply(ctx context.Context, req *AllowSubscribeMessage) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}

func RegisterSubscribeServiceServer(s *grpc.Server, srv SubscribeServiceServer) {
	s.RegisterService(&_SubscribeService_serviceDesc, srv)
}

func _SubscribeService_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribeServiceServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SubscribeService/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribeServiceServer).Receive(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscribeService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllowSubscribeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribeServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SubscribeService/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribeServiceServer).Apply(ctx, req.(*AllowSubscribeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubscribeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.SubscribeService",
	HandlerType: (*SubscribeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Receive",
			Handler:    _SubscribeService_Receive_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _SubscribeService_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscribe.proto",
}
